# This yaml is for ansible consumption
---
- hosts: localhost
  gather_facts: no
  vars_files:
  - "{{ playbook_dir }}/vars/external_vars.yaml"

  tasks:
  - include_vars: "{{ playbook_dir }}/vars/k8s_login.yaml"

  - name: Log in to OpenShift
    k8s_auth:
      host: "{{ api_url }}"
      ca_cert: "{{ api_cert }}"
      username: "{{ k8s_admin }}"
      password: "{{ k8s_admin_password }}"
    register: k8s_auth_results

  - name: Create the bookinfo namespace
    k8s:
      name: "{{ bookinfo_ns }}"
      api_version: v1
      kind: Namespace
      state: present
  
  - name: Download the bookinfo definition
    get_url:
      url: "{{ bookinfo_def_url }}"
      dest: "{{ bookinfo_yaml }}"
      mode: '0640'

  - name: Create the bookinfo application
    k8s:
      state: present
      namespace: "{{ bookinfo_ns }}"
      src: "{{ bookinfo_yaml }}"

  - name: Install the Operators
    k8s:
      state: present
      src: "{{ item }}"
      wait: yes
      wait_condition:
        reason: AllCatalogSourcesHealthy
        status: "False"
        type: CatalogSourcesUnhealthy
    loop:
      - "{{ es_operator }}"
      - "{{ jaeger_operator }}"
      - "{{ kiali_operator }}"
      - "{{ sm_operator }}"

  - name: Create the namespace for Istio System
    k8s:
      name: "{{ smcp_ns }}"
      api_version: v1
      kind: Namespace
      state: present
 
  - name: Create the Service Mesh Control Plane
    k8s:
      apply: yes
      state: present
      src: "{{ smcp_yaml }}"
      namespace: "{{ smcp_ns }}"

  - name: Wait for SMCP to be Ready
    k8s_info:
      api_version: maistra.io/v2
      kind: ServiceMeshControlPlane
      name: service-mesh-installation
      namespace: "{{ smcp_ns }}"
    register: smcp_status
    until: smcp_status.resources[0].status.conditions[2].status == "True"
    retries: 30 
    delay: 10
    ignore_errors: yes

  - name: Create the Service Mesh Member Roll
    k8s:
      apply: yes
      state: present
      namespace: "{{ smcp_ns }}"
      src: "{{ smmr_yaml }}"

  - name: Get a list of deployments
    k8s_facts:
      api_key: "{{ k8s_auth_results.k8s_auth.api_key }}"
      kind: Deployment
      namespace: "{{ bookinfo_ns }}"
    register: deploy_list

  - name: Patch deployments to enable sidecar injection
    command: >
      oc -n {{ bookinfo_ns }} patch deployment {{ item.metadata.name }} -p
      '{"spec":{"template":{"metadata":{"annotations":{"sidecar.istio.io/inject": "true" }}}}}'
    loop: "{{ deploy_list.resources }}"
    no_log: True
  
  - name: Create TLS Secret in SMCP Namespace
    k8s:
      state: present
      definition: 
        apiVersion: v1
        kind: Secret
        type: tls
        metadata:
          name: "{{ secret_tls }}"
          namespace: "{{ smcp_ns }}"     
        data:
          tls.crt: "{{ lookup('file',tls_cert ) | b64encode }}"
          tls.key: "{{ lookup('file',tls_key ) | b64encode }}"
  
  - name: Define a Wildcard Gateway
    k8s:
      state: present
      namespace: "{{ smcp_ns }}"
      definition: "{{ lookup('template',wildcard_gateway) }}"

  - name: Create a Policy for mTLS
    k8s:
      state: present
      src: "{{ istio_policy }}"

  - name: Create a DestinationRule for mTLS
    k8s:
      state: present
      src: "{{ istio_destinationrule }}"

  - name: Create a VirtualService for productpage
    k8s:
      state: present
      namespace: "{{ bookinfo_ns }}"
      definition: "{{ lookup('template',productpage_virtualservice) }}"

  - name: Create a Route for productpage
    k8s:
      state: present
      namespace: "{{ smcp_ns }}"
      definition: "{{ lookup('template',productpage_route) }}"
      wait: yes
      wait_condition:
        status: "True"
        type: Admitted

  - name: Check that the productpage service can be reached through the Istio ingress gateway
    uri:
      url: "https://productpage.{{ bookinfo_ns }}.apps.{{ cluster_domain }}/productpage"
      return_content: yes
      validate_certs: no
    register: this
 
  - debug:
      var: this
